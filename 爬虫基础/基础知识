
七层协议：
应用层 HTTP、HTTPS、FTP
表示层
会话层
传输层
网络层
数据链路
物理层

HTTP基本原理：

URL （统一资源定位符）（Universal Resource loactor）
URI （统一之源标志符）
URN （统一资源名称，但是不定位资源）
URI 包含（URL URN）

超文本：（hypertext）
就是浏览器解析后的HTML文本，也可以说超文本就是HTML文本


HTTP：超文本传输协议（Typer Text Transfor Protocol ）
作用：（规则）从网络传输超文本到浏览器中的传送协议
（万维网协会，WWWC）
常用的HTTP版本：HTTP1.1

HTTPS：比HTTP多了一个SSL层，为了保证HTTP通道的安全。

SSL（ Secure Socket Layter 对网络连接进行加密）

HTTPS的作用：
1.建立一个信息安全通道，来保证数据传输的安全性
2.确认网站的真实性

https://www.12306.cn/mormhweb/

HTTP请求过程：
请求方式：get、post、delete、put（从客户端从服务器传输数据来制定文档中的内容、

URL发起了一个请求：

响应状态码：
200: 请求成功
301:永久重定向
302:临时重定向
400:请求错误
401:未授权
403:禁止访问
404:未找到资源
500:服务器遇到错误

响应头：返回响应的状态信息
响应体：返回页面的HTML代码，或者是其他服务器想要返回给我们的内容

网页的基础：
网页基本组成：
HTML  CSS  JS

HTML：定义了网页的框架结构
超文本标记语言，展示标题、段落、图片、视频等。。。。。。。

CSS：层叠样式表
作用：为了让我们的界面更美观
类选择器
.div {
   属性
}

Id选择器
#div{

}

群组选择器
div , id, a{

}

JS：脚本语言，配合HTML和CSS共同使用的，
静态界面
动态界面
JS一般以单独的文件的形式加载的
<script src='xxxx.js' ></script>


节点树和节点
节点：所有标签定义的内容
所有的节点形成了HTML的DOM树

1.整个HTML是一个文档节点
2.每一HTML元素都是一个元素节点
3.HTML元素内的文本文本节点
4.HTML里面的属性相当于是一个属性节点，
5.注释节点


    HTML文档
    根元素节点
        header  body
        title   div、p、a、img
        meta

树中的所有节点我们都可以通过JS来访问
节点跟节点之间有哪些关系、兄弟节点、父子节点等

选择器：
.class
#id 
*
p 指定选择的标签类型
div p  a  <div><p><a> 我是一段文本 </a></p></div>

正式环节：
爬虫：数据、url、.....

爬虫其实就是一段自动抓取互联网数据的程序
大量数据采集的时候需要使用爬虫技术来实现
1.确定目标url
2.获取网页的信息源码（构造请求（get、post）->发起请求->获取响应结果（获得源码数据））
3.根据需要的信息分析网页（HTML结构、标签、节点、标签的属性（id、class））
4.解析（lxml、BeautifulSoup4、pyQuery）、提取信息（正则表达式）
5.数据的持久化、保存数据（mysql、TXT、mongodb）
6.实现了一段可以自动从网上获取数据的程序（爬虫）
以上是最基本的流程。

python自带的网络请求的模块
urllib
urllib的内置请求库：

request：是最基本的HTTP请求模块，模拟发送请求，它需要传入URL链接，和相关的参数。
error：是一个异常处理模块，当我们发起请求出错的时候，可以使用这个模块来捕获异常。
parse：主要是用来解析、合并、拆分url
robotparse：主要是用来识别网站的robot协议，判断哪些网址我们可以访问（抓取），哪些不可以，一般不用，因为我们不准守这个规则。


request，怎样发起一个请求？
